// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model Candidate {
  id              Int             @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String          @unique
  phone           String?
  address         String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  education       Education[]
  workExperience  WorkExperience[]
  documents       Document[]
  status          CandidateStatus @default(ACTIVE)
}

model Education {
  id          Int       @id @default(autoincrement())
  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  description String?
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String?
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Document {
  id          Int       @id @default(autoincrement())
  type        DocType
  fileName    String
  fileUrl     String
  fileSize    Int
  mimeType    String
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum CandidateStatus {
  ACTIVE
  INACTIVE
  HIRED
  REJECTED
}

enum DocType {
  CV
  COVER_LETTER
  CERTIFICATE
  OTHER
}